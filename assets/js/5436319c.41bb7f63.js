"use strict";(self.webpackChunkmmm_for_all=self.webpackChunkmmm_for_all||[]).push([[199],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return h}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,u=c["".concat(s,".").concat(h)]||c[h]||m[h]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3919:function(e,t,n){function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,{b:function(){return a},Z:function(){return r}})},4996:function(e,t,n){n.d(t,{C:function(){return o},Z:function(){return i}});var a=n(2263),r=n(3919);function o(){var e=(0,a.Z)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,o=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var o=void 0===a?{}:a,i=o.forcePrependBaseUrl,l=void 0!==i&&i,s=o.absolute,p=void 0!==s&&s;if(!n)return n;if(n.startsWith("#"))return n;if((0,r.b)(n))return n;if(l)return t+n;var d=n.startsWith(t)?n:t+n.replace(/^\//,"");return p?e+d:d}(o,n,e,t)}}}function i(e,t){return void 0===t&&(t={}),(0,o().withBaseUrl)(e,t)}},7165:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return m},default:function(){return h}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=n(4996),l=["components"],s={id:"demo-R-script",title:"Step-by-step Demo"},p="Learning with the demo",d={unversionedId:"demo-R-script",id:"demo-R-script",isDocsHomePage:!1,title:"Step-by-step Demo",description:"We recommend to use our demo.R script in order to",source:"@site/docs/demo-R-script.mdx",sourceDirName:".",slug:"/demo-R-script",permalink:"/Robyn/docs/demo-R-script",editUrl:"https://github.com/facebookexperimental/Robyn/docs/demo-R-script.mdx",tags:[],version:"current",frontMatter:{id:"demo-R-script",title:"Step-by-step Demo"},sidebar:"someSidebar",previous:{title:"Quick Start",permalink:"/Robyn/docs/quick-start"},next:{title:"Walkthrough videos",permalink:"/Robyn/docs/step-by-step-videos"}},m=[{value:"Step 1: Load the data",id:"step-1-load-the-data",children:[]},{value:"Step 2:  Model specifications",id:"step-2--model-specifications",children:[{value:"Step 2a-1: Specifying the input data and model parameters",id:"step-2a-1-specifying-the-input-data-and-model-parameters",children:[]},{value:"Step 2a-2: Defining hyperparameters",id:"step-2a-2-defining-hyperparameters",children:[]},{value:"Step 2a-3: Add hyperparameters into <code>robyn_inputs()</code>",id:"step-2a-3-add-hyperparameters-into-robyn_inputs",children:[]},{value:"Step 2a-4: Model calibration (Optional)",id:"step-2a-4-model-calibration-optional",children:[]},{value:"Step 2b: For known model specification, how to set it up in one single step",id:"step-2b-for-known-model-specification-how-to-set-it-up-in-one-single-step",children:[]}]},{value:"Step 3: Build the initial model",id:"step-3-build-the-initial-model",children:[{value:"Pareto model solutions plot",id:"pareto-model-solutions-plot",children:[]}]},{value:"Step 4: Select and save your preferred initial model",id:"step-4-select-and-save-your-preferred-initial-model",children:[]},{value:"Step 5: Calculate budget allocation based on the selected model above",id:"step-5-calculate-budget-allocation-based-on-the-selected-model-above",children:[{value:"Budget allocator example plots",id:"budget-allocator-example-plots",children:[]}]},{value:"Step 6: Model refresh based on selected model and saved Robyn.RData object",id:"step-6-model-refresh-based-on-selected-model-and-saved-robynrdata-object",children:[{value:"Robyn refresh models example plots",id:"robyn-refresh-models-example-plots",children:[]}]},{value:"Step 7: Get budget allocation recommendation based on selected refresh runs",id:"step-7-get-budget-allocation-recommendation-based-on-selected-refresh-runs",children:[]},{value:"Step 8: Obtain marginal returns",id:"step-8-obtain-marginal-returns",children:[{value:"Optional: get old model results",id:"optional-get-old-model-results",children:[]}]}],c={toc:m};function h(e){var t=e.components,s=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"learning-with-the-demo"},"Learning with the demo"),(0,o.kt)("p",null,"We recommend to use our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebookexperimental/Robyn/blob/main/demo/demo.R"},"demo.R")," script in order to\nlearn and explore what are the steps to build a model using Robyn. This guide is intended to help you walk through the demo, understand how to:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Load")," the data"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Define")," model specifications",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Specify model ",(0,o.kt)("strong",{parentName:"li"},"inputs")," and parameters"),(0,o.kt)("li",{parentName:"ol"},"Define ",(0,o.kt)("strong",{parentName:"li"},"hyperparameter possible values")," for adstock and saturation curves"),(0,o.kt)("li",{parentName:"ol"},"Determine ",(0,o.kt)("strong",{parentName:"li"},"calibration")," inputs"),(0,o.kt)("li",{parentName:"ol"},"Input a ",(0,o.kt)("strong",{parentName:"li"},"fix model")," setup in one single step"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Build")," your initial model"),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Select")," your preferred initial model ",(0,o.kt)("strong",{parentName:"li"},"solution")),(0,o.kt)("li",{parentName:"ol"},"Calculate ",(0,o.kt)("strong",{parentName:"li"},"budget allocation")," based on the selected model"),(0,o.kt)("li",{parentName:"ol"},"Execute a ",(0,o.kt)("strong",{parentName:"li"},"model refresh")," to add new recent data"),(0,o.kt)("li",{parentName:"ol"},"Get ",(0,o.kt)("strong",{parentName:"li"},"budget allocation")," for new model ",(0,o.kt)("strong",{parentName:"li"},"refresh periods")),(0,o.kt)("li",{parentName:"ol"},"Obtain ",(0,o.kt)("strong",{parentName:"li"},"marginal returns"))),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-1-load-the-data"},"Step 1: Load the data"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Once you have the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/facebookexperimental/Robyn/blob/main/demo/demo.R"},"demo.R")," script open, you will have to either, load the simulated dataset, or load your own data. Just change \u2018dt_simulated weekly\u2019 name to any name your dataset may have. Please have in mind it should be of the data.frame class."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'data("dt_simulated_weekly")\nhead(dt_simulated_weekly)\n')),(0,o.kt)("p",null,"The next step is to load and check the holidays data for Prophet to include them when decomposing seasonality, trend and holiday effects in the data."),(0,o.kt)("p",null,"Prophet includes data for holidays within 59 countries already.\nIf your country is not included in the \u2018dt_prophet_holidays\u2019 data frame, please manually add it to the dt_prophet_holidays data table."),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Pro Tip:")," ",(0,o.kt)("em",{parentName:"p"},"any type of events can be added into this table, not only holidays. E.g. school break, black friday, cyber monday, etc.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'data("dt_prophet_holidays")\nhead(dt_prophet_holidays)\n')),(0,o.kt)("p",null,"Finally you should work on defining the robyn object where everything you run will be saved.\nThe object must be of the extension .Rdata. The object name can be anything different than Robyn too:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'robyn_object <- "~/Desktop/Robyn.RData"\n')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-2--model-specifications"},"Step 2:  Model specifications"),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"step-2a-1-specifying-the-input-data-and-model-parameters"},"Step 2a-1: Specifying the input data and model parameters"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The first thing you will have to do is to define ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"robyn_inputs()")),", which is the function to input all model parameters and check their correctness for the initial model build.\nYou will have to define the following input parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dt_input")),"\nA data.frame. Raw input data which may contain a response variable like revenue, sales or conversions; a set of media variables for channels spend, impressions and/or clicks; and organic, factor or context variables. Load the simulated dataset by running: ",(0,o.kt)("inlineCode",{parentName:"li"},'data("dt_simulated_weekly")')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dt_holidays")),"\nA data.frame. Raw input holiday data. Load default Prophet holidays data by running: ",(0,o.kt)("inlineCode",{parentName:"li"},'data("dt_prophet_holidays")')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"date_var")),"\nA character. This is where you indicate the model what is the name of the date variable. The objective is to tell the model which column to work with for the time series. Daily, weekly and monthly data are supported. Weekly data requires a weekstart of Monday or Sunday. date_var must be of the ''YYYY-MM-DD'' format. E.g. \"2020-01-01\". Default to automatic date detection."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dep_var")),"\nA character. This is the name of the dependent variable. It can be sales, conversions or any other numeric or monetary business outcome. Only one dependent variable is allowed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dep_var_type")),"\nA character. This is the type of dependent variable, which can be ",(0,o.kt)("inlineCode",{parentName:"li"},'"revenue"')," or ",(0,o.kt)("inlineCode",{parentName:"li"},'"conversion"'),". Revenue indicates a monetary value type (E.g. $), whereas, conversion defines a dependent variable that will be just a numeric value (E.g. total units sold). Only one dependent variable type is allowed and case sensitive."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"prophet_vars")),"\nA character vector. It must Include any of ",(0,o.kt)("inlineCode",{parentName:"li"},'"trend", "season", "weekday", "holiday"')," which are case-sensitive. ",(0,o.kt)("inlineCode",{parentName:"li"},'"trend", "season", "holiday"')," and especially ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cweekday\u201d")," are highly advised to be included when working with daily data in order to account for weekly seasonality effects. For weekly or monthly data granularity, we recommend to use just ",(0,o.kt)("inlineCode",{parentName:"li"},'"trend", "season", "holiday"'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"prophet_signs")),"\nA character vector. Choose any of ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "positive", "negative")'),". This input variable controls the signs of coefficients for prophet variables. If the sign is set as \u201cdefault\u201d it means it will be possible for the model to reflect either a positive or negative effect of the prophet variable ",(0,o.kt)("inlineCode",{parentName:"li"},'("trend", "season", "weekday", "holiday")')," onto the response variable regressed (Conversions, revenue, etc.). The prophet signs vector must have the same length as ",(0,o.kt)("inlineCode",{parentName:"li"},"prophet_vars"),". The sign variables order matters, as it will be mapped literally 1:1 to the ",(0,o.kt)("inlineCode",{parentName:"li"},"prophet_vars")," vector. E.g. If ",(0,o.kt)("inlineCode",{parentName:"li"},"prophet_vars")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("trend", "season", "holiday")')," and ",(0,o.kt)("inlineCode",{parentName:"li"},"prophet_signs")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "default", "positive")')," then this means trend and season can be either negative or positive, while holiday effects on the dependent variable will be forced to be positive only."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"prophet_country")),"\nA character. Only one country is allowed at a time. This indicates which country to use from the default ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdt_holidays\u201d")," Prophet file. Includes national holidays for 59 countries, you may review the list by running: ",(0,o.kt)("inlineCode",{parentName:"li"},'data("dt_prophet_holidays")'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"context_vars")),"\nA character vector. These are context variables that can help explain the dependent variable behavior in time and that are not paid media. Most common examples of these are: competitors, price & promotion, temperature, unemployment rate, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"context_signs")),"\nA character vector. Choose any of ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "positive", "negative")'),". This input variable controls the signs of coefficients for context_vars. If the sign is set as ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdefault\u201d")," it means it will be possible for the model to reflect either a positive or negative effect of the context variable onto the response variable. Must have the same length as ",(0,o.kt)("inlineCode",{parentName:"li"},"context_vars"),". The sign variables order matters, as it will be mapped literally 1:1 to the ",(0,o.kt)("inlineCode",{parentName:"li"},"context_vars")," vector. E.g. If ",(0,o.kt)("inlineCode",{parentName:"li"},"context_vars")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("promotion", "unemployment")')," and ",(0,o.kt)("inlineCode",{parentName:"li"},"prophet_signs")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "negative")')," then this means promotion can be either negative or positive, while unemployment effects on the dependent variable will be forced to be negative only."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"paid_media_vars")),"\nA character vector. These are the names of the media variables that will be used in the model. It is recommended to use metrics that better reflect media-exposure such as impressions, clicks or GRPs instead of spend. It is also advised to split media channels into sub-channels (e.g. fb_retargeting, fb_prospecting etc.) to be able to explain more variance. ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cpaid_media_vars\u201d")," only accepts numeric variables."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"paid_media_signs")),"\nA character vector. Choose any of ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "positive", "negative")'),". This input variable controls the signs of coefficients for paid_media_vars. If the sign is set as ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdefault\u201d")," it means it will be possible for the model to reflect either a positive or negative effect of the paid media variable onto the response variable. Must have the same length as ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars"),". The sign variables order matters, as it will be mapped literally 1:1 to the ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars")," vector. E.g. If ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("facebook_I", "ooh_S")')," and ",(0,o.kt)("inlineCode",{parentName:"li"},"prophet_signs")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "positive")')," then this means facebook_I effect can be either negative or positive, while ooh_S effects on the dependent variable will be forced to be positive only."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"paid_media_spends")),"\nA character vector. This input variable indicates the media spends for each of the channels defined on paid_media_vars. We will use spend to link it to exposure level metrics (impressions, clicks, GRPs, etc.) in paid_media_vars, in order to provide ROAS calculation. If you input spend metrics in ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars"),", please repeat the same name as in ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars"),". However, if you a input a non-spend metric within ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars")," (Impressions, clicks, etc.) then you should input the related spend associated with that channel and non-spend metric.  ",(0,o.kt)("inlineCode",{parentName:"li"},"media_spend_vars")," must have the same channel to channel matching order and same length as ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"organic_vars")),"\nA character vector. Typically newsletter emails sent, push-notifications, social media posts, etc. Compared to ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"organic_vars")," are often marketing activities without a clear marketing spend."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"organic_signs")),"\nA character vector. Choose any of ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "positive", "negative")'),". This input variable controls the signs of coefficients for ",(0,o.kt)("inlineCode",{parentName:"li"},"organic_signs"),". If the sign is set as ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdefault\u201d")," it means it will be possible for the model to reflect either a positive or negative effect of the organic media variable onto the response variable. Must have the same order and same length as ",(0,o.kt)("inlineCode",{parentName:"li"},"organic_vars"),". The sign variables order matters, as it will be mapped literally 1:1 to the ",(0,o.kt)("inlineCode",{parentName:"li"},"organic_vars")," vector. E.g. If ",(0,o.kt)("inlineCode",{parentName:"li"},"organic_vars")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("newsletter", "push-notifications")')," and ",(0,o.kt)("inlineCode",{parentName:"li"},"prophet_signs")," is ",(0,o.kt)("inlineCode",{parentName:"li"},'c("default", "positive")')," then this means newsletter effect can be either negative or positive, while push-notifications effects on the dependent variable will be forced to be positive only."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"factor_vars")),"\nA character vector. Specify which of the provided variables in ",(0,o.kt)("inlineCode",{parentName:"li"},"organic_vars")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"context_vars")," should be used as a factor categorical variable."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"adstock")),"\nA character. Choose any of ",(0,o.kt)("inlineCode",{parentName:"li"},'c("geometric", "weibull")'),". ",(0,o.kt)("inlineCode",{parentName:"li"},"Weibull")," adstock is a two-parametric function and thus more flexible in shape, but it takes longer processing times than the traditional ",(0,o.kt)("inlineCode",{parentName:"li"},"geometric")," one-parametric function. Time estimation: with geometric adstock, 2000 iterations * 5 trials on 8 cores, it should take less than 30 minutes. Whereas weibull takes at least twice as much time."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"hyperparameters")),"\nList containing the hyperparameter lower and upper ranges. The names of the elements in the list must be identical to the output of ",(0,o.kt)("inlineCode",{parentName:"li"},"hyper_names()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"window_start")),"\nA character. Set the start date of the modelling period. The window start will determine the start date of the data period within your dataset you will be using to specifically regress the effects of media, organic and context variables on your dependent variable. We recommend using a full ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdt_input\u201d")," dataset with a minimum of 1 year of history, as it will be used in full for the model calculation of trend, seasonality and holidays effects. Whereas the window period will determine how much of the full data set will be used for media, organic and context variables. E.g. Uploading and using 2 years of data in ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdt_input\u201d")," but determining ",(0,o.kt)("inlineCode",{parentName:"li"},"window_start")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"window_end")," as the last 6 months which reflect better the current business and/or marketing investment reality for budget decision making."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"window_end")),"\nA character. Set end date of modelling period. Recommended to have ratio of independent variable data points of 1:10.\nThe window end will determine the end date of the data period within your dataset you will be using to specifically regress the effects of media, organic and context variables on your dependent variable. We recommend using a full ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdt_input\u201d")," dataset with a minimum of 1 year of history, as it will be used in full for the model calculation of trend, seasonality and holidays effects. Whereas the window period will determine how much of the full data set will be used for media, organic and context variables. E.g. Uploading and using 2 years of data in ",(0,o.kt)("inlineCode",{parentName:"li"},"\u201cdt_input\u201d")," but determining ",(0,o.kt)("inlineCode",{parentName:"li"},"window_start")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"window_end")," as the last 6 months which reflect better the current business and/or marketing investment reality for budget decision making."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"cores")),"\nAn integer. Default to ",(0,o.kt)("inlineCode",{parentName:"li"},"parallel::detectCores()")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"iterations")),"\nAn integer. Recommended 2000 for ",(0,o.kt)("inlineCode",{parentName:"li"},'defaultnevergrad_algo = "TwoPointsDE"')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"trials")),"\nAn integer. Recommended 5 for ",(0,o.kt)("inlineCode",{parentName:"li"},'default nevergrad_algo = "TwoPointsDE"')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"nevergrad_algo")),"\nA character. Default to ",(0,o.kt)("inlineCode",{parentName:"li"},'"TwoPointsDE"'),'. Options arec("DE","TwoPointsDE", "OnePlusOne", "DoubleFastGADiscreteOnePlusOne", "DiscreteOnePlusOne", "PortfolioDiscreteOnePlusOne", "NaiveTBPSA", "cGA", "RandomSearch")'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"calibration_input")),"\nA data.table. It is optional to provide experimental results. We strongly recommend using experimental and causal results that are considered ground truth to calibrate MMM. Usual experiment types are people-based (e.g. Facebook conversion lift) and geo-based (e.g. Facebook GeoLift). Currently, Robyn only accepts point-estimates as calibration input. E.g. with a 50/50 split between control and test groups if you identify $70k in sales on holdout vs. $110k on test. Then you may input $110k-$70k = $40k as the incremental point-estimate for calibration."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"InputCollect")),"\nDefault to NULL. ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_inputs"),"'s output when hyperparameters are not yet set.")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"step-2a-2-defining-hyperparameters"},"Step 2a-2: Defining hyperparameters"),(0,o.kt)("p",null,"All variables in ",(0,o.kt)("inlineCode",{parentName:"p"},"paid_media_vars")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"organic_vars")," require hyperparameters and will be transformed by adstock and saturation curves. The difference between ",(0,o.kt)("inlineCode",{parentName:"p"},"paid_media_vars")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"organic_vars")," is that ",(0,o.kt)("inlineCode",{parentName:"p"},"paid_media_vars")," require spend to be specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"paid_media_spends")," vector."),(0,o.kt)("h4",{id:"how-to-setup-the-hyperparameters"},"How to setup the hyperparameters"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Ensure you have the correct ",(0,o.kt)("strong",{parentName:"li"},"hyperparameter names"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Run ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"hyper_names()"))," to get the correct hyperparameter names. All the names in hyperparameters object must be equal to the names from ",(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"hyper_names()")),", case sensitive."))),(0,o.kt)("li",{parentName:"ol"},"Follow the guidelines for defining ",(0,o.kt)("strong",{parentName:"li"},"hyperparameter ranges"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Please note that for geometric adstock, it is required to use theta, alpha and gamma. Whereas for weibull adstock, it is mandatory to use shape, scale, alpha and gamma.",(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Theta"),": In geometric adstock, theta is the decay rate. For example, if the time unit for the model is weekly, it will represent the percentage of effect each week that is carried over to the following week. The guideline for most common media is: TV c(0.3, 0.8), OOH/Print/Radio c(0.1, 0.4), digital c(0, 0.3)."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Shape"),": In weibull adstock, shape controls the decay shape. Recommended ranges are c(0.0001, 2). The larger, the more S-shape. The smaller, the more L-shape."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Scale"),": In weibull adstock, scale controls the decay inflection point. A very conservative recommended range is c(0, 0.1), because scale can increase adstocking half-life greatly."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Alpha"),": In s-curve transformation with hill function (Diminishing returns), alpha is the parameter that controls the shape between exponential and s-shape. The larger the alpha, the more S-shape. The smaller, the more C-shape."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Gamma"),": In s-curve transformation with hill function (Diminishing returns), gamma controls the inflection point. Recommended range is c(0.3, 1). The larger the gamma, the later the inflection point in the response curve."))))),(0,o.kt)("li",{parentName:"ol"},"Set each ",(0,o.kt)("strong",{parentName:"li"},"hyperparameter range"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"They either contain two values e.g. c(0, 0.5), or only one value. Defining a single value fixes the parameter and prevents the model from exploring solutions within a certain range.")))),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"helper-plots"},"Helper plots"),(0,o.kt)("p",null,"There are a couple of helper plots that can be useful to understand better how ",(0,o.kt)("strong",{parentName:"p"},"adstock")," and ",(0,o.kt)("strong",{parentName:"p"},"saturation")," curves change when altering their hyperparameters."),(0,o.kt)("h4",{id:"plot_adstock"},"plot_adstock"),(0,o.kt)("p",null,"Set to ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"plot_adstock(TRUE)"))," and run the command. This will plot the adstock transformation examples, helping to understand ",(0,o.kt)("strong",{parentName:"p"},"geometric theta")," and ",(0,o.kt)("strong",{parentName:"p"},"weibull shape/scale")," transformation."),(0,o.kt)("img",{alt:"adstockintro chart",src:(0,i.Z)("/img/adstock-qs.png")}),(0,o.kt)("p",null,"Set to ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"plot_saturation(TRUE)"))," and run the command. This will plot the saturation curve transformation example, helping to understand hill, ",(0,o.kt)("strong",{parentName:"p"},"alpha")," and ",(0,o.kt)("strong",{parentName:"p"},"gamma")," transformation."),(0,o.kt)("img",{alt:"saturation chart",src:(0,i.Z)("/img/saturation-qs.png")}),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"examples-for-hypermarameter-definitions"},"Examples for hypermarameter definitions"),(0,o.kt)("h5",{id:"defining-hyper_names-for-geometric-adstock"},"Defining hyper_names for geometric adstock"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'hyper_names(adstock = "geometric", all_media = InputCollect$all_media)\nhyperparameters <- list(\n  facebook_I_alphas = c(0.5, 3), # example bounds for alpha\n  facebook_I_gammas = c(0.3, 1), # example bounds for gamma\n  facebook_I_thetas = c(0, 0.3), # example bounds for theta\n  tv_S_alphas = c(0.5, 3),\n  tv_S_gammas = c(0.3, 1),\n  tv_S_thetas = c(0.3, 0.8),\n  newsletter_alphas = c(0.5, 3),\n  newsletter_gammas = c(0.3, 1),\n  newsletter_thetas = c(0.1, 0.4)\n)\n')),(0,o.kt)("h5",{id:"defining-hyper_names-for-weibull-adstock"},"Defining hyper_names for weibull adstock"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'hyper_names(adstock = "weibull", all_media = InputCollect$all_media)\n\nhyperparameters <- list(\n  facebook_I_alphas = c(0.5, 3), # example bounds for alpha\n  facebook_I_gammas = c(0.3, 1) # example bounds for gamma\n  facebook_I_shapes = c(0.0001, 2), # example bounds for shape\n  facebook_I_scales = c(0, 0.1), # example bounds for scale\n  tv_S_alphas = c(0.5, 3),\n  tv_S_gammas = c(0.3, 1),\n  tv_S_shapes = c(0.0001, 2),\n  tv_S_scales = c(0, 0.1),\n  newsletter_alphas = c(0.5, 3),\n  newsletter_gammas = c(0.3, 1),\n  newsletter_shapes = c(0.0001, 2),\n  newsletter_scales = c(0, 0.1)\n)\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"step-2a-3-add-hyperparameters-into-robyn_inputs"},"Step 2a-3: Add hyperparameters into ",(0,o.kt)("inlineCode",{parentName:"h3"},"robyn_inputs()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"InputCollect <-\n  robyn_inputs(InputCollect = InputCollect, hyperparameters = hyperparameters)\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"step-2a-4-model-calibration-optional"},"Step 2a-4: Model calibration (Optional)"),(0,o.kt)("h4",{id:"how-to-input-details-from-experiments"},"How to input details from experiments"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"We strongly recommend using experimental and causal results that are considered ground truth to calibrate MMM. Usual experiment types are people-based (e.g. Facebook conversion lift) and geo-based (e.g. Facebook GeoLift)."),(0,o.kt)("li",{parentName:"ol"},"Robyn only accepts point-estimates as a calibration input. For example, if 10k$ spend is tested against a holdout for channel A, then input the incremental absolute return as a point-estimate for the test period just like the example below."),(0,o.kt)("li",{parentName:"ol"},"The point-estimate must match the regular spend for the channel measured. For example, if channel A usually has $100k weekly spend and the experimental holdout is 70%, input the point-estimate for the incremental sales resulting from the proportional $30k spent in test, without the $70k from the audience held outside of the study.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},' dt_calibration <- data.frame(\n   # channel name must be in paid_media_vars\n     channel = c("facebook_I",  "tv_S", "facebook_I")\n\n   # liftStartDate must be within input data range\n   , liftStartDate = as.Date(c("2018-05-01", "2017-11-27", "2018-07-01"))\n\n   # liftEndDate must be within input data range\n   , liftEndDate = as.Date(c("2018-06-10", "2017-12-03", "2018-07-20"))\n\n   # The provided value must be tested on the same\n   # campaign level than the model and same metric as dep_var_type\n   , liftAbs = c(400000, 300000, 200000)\n )\n\n InputCollect <- robyn_inputs(InputCollect = InputCollect\n                              , calibration_input = dt_calibration)\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"step-2b-for-known-model-specification-how-to-set-it-up-in-one-single-step"},"Step 2b: For known model specification, how to set it up in one single step"),(0,o.kt)("p",null,"You may specify hyperparameters as in 2a-2 and optionally calibration as in 2a-4 and provide them directly in robyn_inputs() function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," InputCollect <- robyn_inputs(\n   dt_input = dt_simulated_weekly\n...\n...\n...\n   ,hyperparameters = hyperparameters # as in 2a-2 above\n   ,calibration_input = dt_calibration # as in 2a-4 above\n )\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-3-build-the-initial-model"},"Step 3: Build the initial model"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Please run first ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"?robyn_run"))," to check the model's parameters definition:"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_run()")," function consumes the output from ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_input()"),", runs the ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_mmm()")," functions and plots and collects the results into a defined folder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"OutputCollect <- robyn_run(\n  InputCollect = InputCollect # feed in all model specification\n  , plot_folder = robyn_object # plots will be saved in the same folder as robyn_object\n  , pareto_fronts = 3\n  , plot_pareto = TRUE\n  )\n")),(0,o.kt)("p",null,"Besides the ",(0,o.kt)("a",{target:"_blank",href:n(7665).Z},"one-pager plots"),": there are ",(0,o.kt)("strong",{parentName:"p"},"4 .csv outputs")," that are saved in the folder for further usage:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"pareto_hyperparameters.csv")),": hyperparameters per pareto output model"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"pareto_aggregated.csv")),": aggregated decomposition per independent variable of all pareto outputs"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"pareto_media_transform_matrix.csv")),": all media transformation vectors"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"pareto_alldecomp_matrix.csv")),": all decomposition vectors of independent variables")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_run-arguments"},(0,o.kt)("strong",{parentName:"h4"},(0,o.kt)("inlineCode",{parentName:"strong"},"robyn_run()")," arguments")),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"InputCollect")),"\nA list. Contains all input parameters for the model. Required when ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_object")," is not provided."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"plot_folder")),"\nA character. Path for saving plots. Default to ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_object")," and saves plot in the same directory as ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_object"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"pareto_fronts")),"\nAn integer. Number of Pareto fronts for the output. ",(0,o.kt)("inlineCode",{parentName:"p"},"pareto_fronts = 1")," returns the best models trading off ",(0,o.kt)("inlineCode",{parentName:"p"},"NRMSE & DECOMP.RSSD"),". Increase ",(0,o.kt)("inlineCode",{parentName:"p"},"pareto_fronts")," to get more model choices."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"plot_pareto")),"\nA boolean. Set to FALSE to deactivate plotting and saving model one-pagers. Used when testing models."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"refresh")),"\nA boolean. Set to ",(0,o.kt)("inlineCode",{parentName:"p"},"TRUE")," when used in ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_refresh()")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"dt_hyper_fixed")),"\nA data.frame. Only provide when loading old model results. It consumes hyperparameters from saved csv ",(0,o.kt)("inlineCode",{parentName:"p"},"pareto_hyperparameters.csv"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"ui")),"\nA boolean. Save additional outputs for UI usage. List outcome."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"pareto-model-solutions-plot"},"Pareto model solutions plot"),(0,o.kt)("p",null,"After running the model, a Pareto-front chart for the initial model build will be displayed.\nThis chart shows the performance of the multi-objective optimization from the evolutionary algorithm\nplatform Nevergrad over 10k iterations in total."),(0,o.kt)("img",{alt:"pareto chart 2",src:(0,i.Z)("/img/pareto2.png")}),(0,o.kt)("p",null,"The two axes (NRMSE on x and DECOMP.RSSD on y) are the two objective functions to be minimized.\nAs the iteration increases, a trend down the lower left corner of the coordinate can be clearly observed.\nThis is a proof of Nevergrad's ability to drive the model result towards an optimal direction.\nThe red lines are Pareto-fronts 1-3 and contains the best possible model results from all iterations."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-4-select-and-save-your-preferred-initial-model"},"Step 4: Select and save your preferred initial model"),(0,o.kt)("p",null,"Please compare all model ",(0,o.kt)("a",{target:"_blank",href:n(7665).Z},"one-pager plots")," in the plot folder and select the one that better represents your business reality:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'OutputCollect$allSolutions # get all model IDs in result\nselect_model <- "5_126_5" # select one from above\nrobyn_save(robyn_object = robyn_object # model object location and name\n           , select_model = select_model # selected model ID\n           , InputCollect = InputCollect # all model input\n           , OutputCollect = OutputCollect # all model output\n)\n')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-5-calculate-budget-allocation-based-on-the-selected-model-above"},"Step 5: Calculate budget allocation based on the selected model above"),(0,o.kt)("p",null,"The budget allocator result requires further validation. Please use these results with caution. Avoid using or interpreting budget allocation results if the selected results do not meet your business expectations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"# Check media summary for selected model\nOutputCollect$xDecompAgg[solID == select_model & !is.na(mean_spend)\n                         , .(rn, coef,mean_spend, mean_response, roi_mean\n                             , total_spend, total_response=xDecompAgg, roi_total, solID)]\n")),(0,o.kt)("p",null,"Run ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"?robyn_allocator"))," to check if parameter definitions are correct."),(0,o.kt)("p",null,"Run the ",(0,o.kt)("inlineCode",{parentName:"p"},'"max_historical_response"')," scenario which answers the question:\n",(0,o.kt)("em",{parentName:"p"},'"How can I improve my overall media investment efficiency, assuming the same historical spend level. What is the optimal spend mix to maximize the response (E.g. sales)?"')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'AllocatorCollect <- robyn_allocator(\n  InputCollect = InputCollect\n  , OutputCollect = OutputCollect\n  , select_model = select_model\n  , scenario = "max_historical_response"\n  , channel_constr_low = c(0.7, 0.7, 0.7, 0.7, 0.7)\n  , channel_constr_up = c(1.2, 1.5, 1.5, 1.5, 1.5)\n)\n')),(0,o.kt)("p",null,"Observe the allocator results. Last column ",(0,o.kt)("strong",{parentName:"p"},'"optmResponseUnitTotalLift"')," is the total response lift."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"AllocatorCollect$dt_optimOut\n")),(0,o.kt)("p",null,"Run the ",(0,o.kt)("inlineCode",{parentName:"p"},'"max_response_expected_spend"')," scenario which answers:\n",(0,o.kt)("em",{parentName:"p"},'"What is the maximum response I can obtain for a given total spend, assuming same historical saturation curves. What is the spend mix?"')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'AllocatorCollect <- robyn_allocator(\n  InputCollect = InputCollect\n  , OutputCollect = OutputCollect\n  , select_model = select_model\n  , scenario = "max_response_expected_spend"\n  , channel_constr_low = c(0.7, 0.7, 0.7, 0.7, 0.7)\n  , channel_constr_up = c(1.2, 1.5, 1.5, 1.5, 1.5)\n  , expected_spend = 1000000 # Total spend to be simulated\n  , expected_spend_days = 7 # Duration of expected_spend in days\n)\n')),(0,o.kt)("p",null,"Observe the allocator results. The column ",(0,o.kt)("strong",{parentName:"p"},'"optmResponseUnitTotal"')," is the maximum unit (weekly with simulated dataset) response. ",(0,o.kt)("strong",{parentName:"p"},'"optmSpendShareUnit"')," is the optimum spend share."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"AllocatorCollect$dt_optimOut\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"budget-allocator-example-plots"},"Budget allocator example plots"),(0,o.kt)("p",null,"Below there is an example of a budger allocator result plot which is typically saved within the plot folder with all model results plots where your Robyn.RData object resides.\nYou will find it with the name: ",(0,o.kt)("em",{parentName:"p"},"[select_model_SolID]","_reallocated.png")),(0,o.kt)("img",{alt:"pareto chart 2",src:(0,i.Z)("/img/budgerAllocator1.png")}),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_allocator-description"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_allocator()")," description"),(0,o.kt)("hr",null),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_allocator()")," function returns a new split of media variable spends that maximizes the total media response."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_allocator-usage"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_allocator()")," Usage"),(0,o.kt)("hr",null),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'robyn_allocator(\n  robyn_object = NULL,\n  select_build = NULL,\n  InputCollect = NULL,\n  OutputCollect = NULL,\n  select_model = NULL,\n  optim_algo = "SLSQP_AUGLAG",\n  scenario = "max_historical_response",\n  expected_spend = NULL,\n  expected_spend_days = NULL,\n  channel_constr_low = 0.5,\n  channel_constr_up = 2,\n  maxeval = 1e+05,\n  constr_mode = "eq"\n)\n')),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_allocator-arguments"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_allocator()")," Arguments"),(0,o.kt)("hr",null),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"robyn_object")),"\nA character. This is the path of the ",(0,o.kt)("inlineCode",{parentName:"li"},"Robyn.RData")," object that contains all previous modeling information."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"select_build")),"\nAn integer. Default to the latest model build. ",(0,o.kt)("inlineCode",{parentName:"li"},"select_build = 0")," selects the initial model. ",(0,o.kt)("inlineCode",{parentName:"li"},"select_build = 1")," selects the first refresh model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"InputCollect")),"\nA list. Contains all input parameters for the model. Required when ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"OutputCollect")),"\nA list. Containing all model results. Required when ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"select_model")),"\nA character. A model ",(0,o.kt)("inlineCode",{parentName:"li"},"SolID"),". When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is provided, ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model")," defaults to the already selected ",(0,o.kt)("inlineCode",{parentName:"li"},"SolID"),". When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided, ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model")," must be provided with ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"OutputCollect"),", and must be one of the solutions in ",(0,o.kt)("inlineCode",{parentName:"li"},"OutputCollect$allSolutions"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"optim_algo")),'\nA character. Default is "SLSQP_AUGLAG", short for "Sequential Least-Squares Quadratic Programming" and "Augmented Lagrangian". Alternatively, ""MMA_AUGLAG", short for "Method of Moving Asymptotes". More details see the documentation of NLopt ',(0,o.kt)("a",{parentName:"li",href:"https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/"},"here"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"scenario")),"\nA character. Accepted options are: ",(0,o.kt)("inlineCode",{parentName:"li"},'"max_historical_response"')," or ",(0,o.kt)("inlineCode",{parentName:"li"},'"max_response_expected_spend"'),".\n",(0,o.kt)("inlineCode",{parentName:"li"},'"max_historical_response"'),' simulates the scenario "what\'s the optimal media spend allocation given the same average spend level in history?", while ',(0,o.kt)("inlineCode",{parentName:"li"},'"max_response_expected_spend"'),' simulates the scenario "what\'s the optimal media spend allocation of a given future spend level for a given period?"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"expected_spend")),"\nNumeric. The expected future spend volume. Only applicable when ",(0,o.kt)("inlineCode",{parentName:"li"},'scenario = "max_response_expected_spend"'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"expected_spend_days")),"\nAn integer. The duration of the future spend volume in ",(0,o.kt)("inlineCode",{parentName:"li"},"expected_spend"),". Only applies when ",(0,o.kt)("inlineCode",{parentName:"li"},'scenario = "max_response_expected_spend"'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"channel_constr_low, channel_constr_up")),"\nNumeric vector. The lower and upper bounds for each paid media variable when maximizing total media response. ",(0,o.kt)("inlineCode",{parentName:"li"},"channel_constr_low = 0.7")," means the minimum spend of the channel solution can be as low as 70% of the historical average. Whereas ",(0,o.kt)("inlineCode",{parentName:"li"},"channel_constr_up = 1.5")," means that the maximum spend of the variable can be up to 150% the historical average. The upper bound must be >= than the lower bound. Both must have the same length and order as ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"maxeval")),"\nAn integer. The maximum iteration of the global optimization algorithm. Defaults to 100000."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"constr_mode")),'\nA character. Options are "eq" or "ineq", indicating constraints with equality or inequality.')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-6-model-refresh-based-on-selected-model-and-saved-robynrdata-object"},"Step 6: Model refresh based on selected model and saved Robyn.RData object"),(0,o.kt)("p",null,'NOTE: must run robyn_save to select and save an initial model first, before refreshing below\nThe robyn_refresh() function is suitable for updating within "reasonable periods"\nTwo situations are considered better to rebuild model:'),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"When most ",(0,o.kt)("strong",{parentName:"li"},"data is new"),". If initial model has 100 weeks and 80 weeks new data is added in refresh, it might be better to rebuild the model"),(0,o.kt)("li",{parentName:"ol"},"When ",(0,o.kt)("strong",{parentName:"li"},"new variables")," are added")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Please run ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"?robyn_refresh"))," to check parameter definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Robyn <- robyn_refresh(\n  robyn_object = robyn_object\n  , dt_input = dt_simulated_weekly\n  , dt_holidays = dt_prophet_holidays\n  , refresh_steps = 13\n  , refresh_mode = \"auto\"\n  , refresh_iters = 1000 # Iteration for refresh. 600 is rough estimation. We'll still\n  # figuring out what's the ideal number.\n  , refresh_trials = 3\n)\n")),(0,o.kt)("p",null,"Besides the plots, there are ",(0,o.kt)("strong",{parentName:"p"},"4 .csv outputs")," saved in the folder for further usage:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"report_hyperparameters.csv")),": hyperparameters of all selected model for reporting"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"report_aggregated.csv")),": aggregated decomposition per independent variable"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"report_media_transform_matrix.csv")),": all media transformation vectors"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("em",{parentName:"strong"},"report_alldecomp_matrix.csv")),": all decomposition vectors of independent variables")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"robyn-refresh-models-example-plots"},"Robyn refresh models example plots"),(0,o.kt)("p",null,"Below there is an example of the model refresh plot results and how they are fit in time.\nAs well as, their corresponding plots which reflect the decomposition of each variable effect and ROAS."),(0,o.kt)("h4",{id:"reporting-model-refresh-time-series-fit"},"Reporting model refresh time-series fit"),(0,o.kt)("p",null,"You may observe in the plot below that all initial and refresh builds are included sequentially.\nFor the refresh builds, only the new periods added will be appended.\nThe assembled R-squared is adjusted and describes the fit of the assembled actual & fitted lines below.\nRefresh builds can have different window lengths (parameter refresh_step in the robyn_refresh() function)."),(0,o.kt)("img",{alt:"pareto chart 2",src:(0,i.Z)("/img/refresh-window.png")}),(0,o.kt)("h4",{id:"reporting-model-refresh-decomposition--roas"},"Reporting model refresh decomposition & ROAS"),(0,o.kt)("p",null,"The chart below shows the decomposition of all predictors per each model build.\nThe baseline variable is the sum of all prophet variables (trend, season, weekday, holiday) and the intercept.\nPlease have in mind that the below data is simulated and for illustration purposes only."),(0,o.kt)("img",{alt:"pareto chart 2",src:(0,i.Z)("/img/refresh-reporting.png")}),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_refresh-description"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_refresh()")," description"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_refresh()")," function builds updated models based on the previously built models saved in the Robyn.RData object specified in robyn_object.\nFor example, when updating the initial build with 4 weeks of new data, ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_refresh()")," consumes the selected model of the initial build."),(0,o.kt)("p",null,"What Robyn does, is to set lower and upper bounds of hyperparameters for the new build around the selected hyperparameters of the previous build,\nstabilizes the effect of baseline variables across old and new builds and regulates the new effect share of media variables towards the latest spend level.\nIt returns aggregated results with all previous builds for reporting purposes and produces reporting plots."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_refresh-usage"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_refresh()")," usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'robyn_refresh(\n  robyn_object,\n  dt_input = dt_input,\n  dt_holidays = dt_holidays,\n  refresh_steps = 4,\n  refresh_mode = "manual",\n  refresh_iters = 1000,\n  refresh_trials = 3,\n  plot_pareto = TRUE\n)\n')),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_refresh-arguments"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_refresh()")," arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"robyn_object")),"\nA character. Path of the ",(0,o.kt)("inlineCode",{parentName:"li"},"Robyn.RData")," object that contains all previous modeling information."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dt_input")),"\nA data.frame. It should include all previous data and newly added data for the refresh."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dt_holidays")),"\nA data.frame. Raw input holiday data. Load standard Prophet holidays using ",(0,o.kt)("inlineCode",{parentName:"li"},'data("dt_prophet_holidays")'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"refresh_steps")),"\nAn integer. It controls how many time units the refresh model build will move forward. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},"refresh_steps = 4")," on weekly data means the ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect$window_start")," & ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect$window_end")," will move forward 4 weeks."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"refresh_mode")),'\nA character. Options are "auto" and "manual". In auto mode, the ',(0,o.kt)("inlineCode",{parentName:"li"},"robyn_refresh()")," function builds refresh models following given ",(0,o.kt)("inlineCode",{parentName:"li"},"refresh_steps")," repeatedly until there is no more data available. In manual mode, the ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_refresh()")," moves forward the ",(0,o.kt)("inlineCode",{parentName:"li"},"refresh_steps")," only once."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"refresh_iters")),"\nAn integer. The number of iterations per refresh. The rule of thumb is, the more new data added, the more iterations needed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"refresh_trials")),"\nAn integer. The number of trials per refresh. Defaults to 5 trials."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"plot_pareto")),"\nA logical value. Set it to FALSE to deactivate plotting and saving model onepagers, commonly used when testing models.")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-7-get-budget-allocation-recommendation-based-on-selected-refresh-runs"},"Step 7: Get budget allocation recommendation based on selected refresh runs"),(0,o.kt)("p",null,"Please run ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"?robyn_allocator"))," to check if parameter definitions are correct."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'AllocatorCollect <- robyn_allocator(\n  robyn_object = robyn_object\n  , select_build = 3 # Use third refresh model\n  , scenario = "max_response_expected_spend"\n  , channel_constr_low = c(0.7, 0.7, 0.7, 0.7, 0.7)\n  , channel_constr_up = c(1.2, 1.5, 1.5, 1.5, 1.5)\n  , expected_spend = 2000000 # Total spend to be simulated\n  , expected_spend_days = 14 # Duration of expected_spend in days\n)\n\nAllocatorCollect$dt_optimOut\n')),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_allocator-description-1"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_allocator()")," description"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"robyn_allocator()")," function returns a new split of media variable spends that maximizes the total media response."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_allocator-usage-1"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_allocator()")," Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'robyn_allocator(\n  robyn_object = NULL,\n  select_build = NULL,\n  InputCollect = NULL,\n  OutputCollect = NULL,\n  select_model = NULL,\n  optim_algo = "SLSQP_AUGLAG",\n  scenario = "max_historical_response",\n  expected_spend = NULL,\n  expected_spend_days = NULL,\n  channel_constr_low = 0.5,\n  channel_constr_up = 2,\n  maxeval = 1e+05,\n  constr_mode = "eq"\n)\n')),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_allocator-arguments-1"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_allocator()")," Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"robyn_object")),"\nA character. This is the path of the ",(0,o.kt)("inlineCode",{parentName:"li"},"Robyn.RData")," object that contains all previous modeling information."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"select_build")),"\nAn integer. Default to the latest model build. ",(0,o.kt)("inlineCode",{parentName:"li"},"select_build = 0")," selects the initial model. ",(0,o.kt)("inlineCode",{parentName:"li"},"select_build = 1")," selects the first refresh model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"InputCollect")),"\nA list. Contains all input parameters for the model. Required when ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"OutputCollect")),"\nA list. Containing all model results. Required when ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"select_model")),"\nA character. A model ",(0,o.kt)("inlineCode",{parentName:"li"},"SolID"),". When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is provided, ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model")," defaults to the already selected ",(0,o.kt)("inlineCode",{parentName:"li"},"SolID"),". When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided, ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model")," must be provided with ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"OutputCollect"),", and must be one of the solutions in ",(0,o.kt)("inlineCode",{parentName:"li"},"OutputCollect$allSolutions"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"optim_algo")),'\nA character. Default is "SLSQP_AUGLAG", short for "Sequential Least-Squares Quadratic Programming" and "Augmented Lagrangian". Alternatively, ""MMA_AUGLAG", short for "Method of Moving Asymptotes". More details see the documentation of NLopt ',(0,o.kt)("a",{parentName:"li",href:"https://nlopt.readthedocs.io/en/latest/NLopt_Algorithms/"},"here"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"scenario")),"\nA character. Accepted options are: ",(0,o.kt)("inlineCode",{parentName:"li"},'"max_historical_response"')," or ",(0,o.kt)("inlineCode",{parentName:"li"},'"max_response_expected_spend"'),'.\n"max_historical_response" simulates the scenario "what\'s the optimal media spend allocation given the same average spend level in history?", while "max_response_expected_spend" simulates the scenario "what\'s the optimal media spend allocation of a given future spend level for a given period?"'),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"expected_spend")),"\nNumeric. The expected future spend volume. Only applicable when ",(0,o.kt)("inlineCode",{parentName:"li"},'scenario = "max_response_expected_spend"'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"expected_spend_days")),"\nAn integer. The duration of the future spend volume in ",(0,o.kt)("inlineCode",{parentName:"li"},"expected_spend"),". Only applies when ",(0,o.kt)("inlineCode",{parentName:"li"},'scenario = "max_response_expected_spend"'),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"channel_constr_low, channel_constr_up")),"\nNumeric vector. The lower and upper bounds for each paid media variable when maximizing total media response. ",(0,o.kt)("inlineCode",{parentName:"li"},"channel_constr_low = 0.7")," means the minimum spend of the channel solution can be as low as 70% of the historical average. Whereas ",(0,o.kt)("inlineCode",{parentName:"li"},"channel_constr_up = 1.5")," means that the maximum spend of the variable can be up to 150% the historical average. The upper bound must be >= than the lower bound. Both must have the same length and order as ",(0,o.kt)("inlineCode",{parentName:"li"},"paid_media_vars"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"maxeval")),"\nAn integer. The maximum iteration of the global optimization algorithm. Defaults to 100000."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"constr_mode")),'\nA character. Options are "eq" or "ineq", indicating constraints with equality or inequality.')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"step-8-obtain-marginal-returns"},"Step 8: Obtain marginal returns"),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"robyn_response()"))," function returns the response for a given spend level of a given ",(0,o.kt)("inlineCode",{parentName:"p"},"paid_media_vars")," from a selected model result of a selected model build (initial model, refresh model etc.)."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_response-usage"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_response()")," Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"robyn_response(\n  robyn_object = NULL,\n  select_build = NULL,\n  media_metric = NULL,\n  select_model = NULL,\n  metric_value = NULL,\n  dt_hyppar = NULL,\n  dt_coef = NULL,\n  InputCollect = NULL\n)\n")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"robyn_response-arguments"},(0,o.kt)("inlineCode",{parentName:"h4"},"robyn_response()")," Arguments"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"robyn_object")),"\nA character. Path of the ",(0,o.kt)("inlineCode",{parentName:"li"},"Robyn.RData")," object that contains all previous modeling information."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"select_build")),"\nAn integer. Its default is the latest model build. ",(0,o.kt)("inlineCode",{parentName:"li"},"select_build = 0")," selects the initial model. ",(0,o.kt)("inlineCode",{parentName:"li"},"select_build = 1")," selects the first refresh model."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"media_metric")),"\nA character. The selected paid media variable for the response. Must be one of the paid media variables within ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect$paid_media_vars")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"select_model")),"\nA character. A model ",(0,o.kt)("inlineCode",{parentName:"li"},"SolID"),". When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is provided, ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model")," defaults to the already selected ",(0,o.kt)("inlineCode",{parentName:"li"},"SolID"),". When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided, ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model")," must be provided with ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"OutputCollect"),", and must be one of the solutions in ",(0,o.kt)("inlineCode",{parentName:"li"},"OutputCollect$allSolutions"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"spend")),"\nNumeric. The desired spend level to return a response for."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dt_hyppar")),"\nA data.table. When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided, use ",(0,o.kt)("inlineCode",{parentName:"li"},"dt_hyppar = OutputCollect$resultHypParam"),". It must be provided along with ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"dt_coef")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"dt_coef")),"\nA data.table. When ",(0,o.kt)("inlineCode",{parentName:"li"},"robyn_object")," is not provided, use ",(0,o.kt)("inlineCode",{parentName:"li"},"dt_coef = OutputCollect$xDecompAgg"),". It must be provided along with ",(0,o.kt)("inlineCode",{parentName:"li"},"select_model"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"dt_hyppar")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"InputCollect"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"InputCollect")),"\nA list. Contains all input parameters for the model. Required when robyn_object is not provided.")),(0,o.kt)("hr",null),(0,o.kt)("p",null,"Below, there is an example of how to get marginal ROI of next 1000$ from an initial $80k spend level for the search channel:"),(0,o.kt)("p",null,"First run ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"?robyn_response"))," to check the parameter definition"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Get response for 80k\nSpend1 <- 80000\nResponse1 <- robyn_response(\n  robyn_object = robyn_object\n  #, select_build = 1 # 2 means the second refresh model. 0 means the initial model\n  , media_metric = "search_S"\n  , metric_value = Spend1)\nResponse1/Spend1 # ROI for search 80k\n\n# Get response for 81k\nSpend2 <- Spend1+1000\nResponse2 <- robyn_response(\n  robyn_object = robyn_object\n  #, select_build = 1\n  , media_metric = "search_S"\n  , metric_value = Spend2)\nResponse2/Spend2 # ROI for search 81k\n\n# Marginal ROI of next 1000$ from 80k spend level for search\n(Response2-Response1)/(Spend2-Spend1)\n\n')),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"optional-get-old-model-results"},"Optional: get old model results"),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"get-old-hyperparameters-and-select-model"},"Get old hyperparameters and select model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'dt_hyper_fixed <- fread("~/Desktop/2021-07-29 00.56 init/pareto_hyperparameters.csv")\nselect_model <- "1_24_5"\ndt_hyper_fixed <- dt_hyper_fixed[solID == select_model]\n\nOutputCollectFixed <- robyn_run(\n  # InputCollect must be provided by robyn_inputs with same dataset and parameters as before\n  InputCollect = InputCollect\n  , plot_folder = robyn_object\n  , dt_hyper_fixed = dt_hyper_fixed)\n')),(0,o.kt)("h4",{id:"save-robyn-object-for-further-refresh"},"Save Robyn object for further refresh"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"robyn_save(robyn_object = robyn_object\n           , select_model = select_model\n           , InputCollect = InputCollect\n           , OutputCollect = OutputCollectFixed)\n")),(0,o.kt)("hr",null))}h.isMDXComponent=!0},7665:function(e,t,n){t.Z=n.p+"assets/files/ModelResults1-673b1b79930d5c3f2138cb59c1632dd2.png"}}]);